{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2573ce63",
   "metadata": {},
   "source": [
    "# Black Friday EDA "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 371,
   "id": "77e53dcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#importing all important libraries:\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "import seaborn as sns\n",
    "from matplotlib import style"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99db3a38",
   "metadata": {},
   "source": [
    "Dataset Information---\n",
    "A retail company want to understand the purchase behaviour and pattern of the customer on 'Black Friday' Festival. \n",
    "The dataset contains detail such as:\n",
    "Gender, age, Occupation, City, Martial Status, Product category and\n",
    "total sales amount of last  Month"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f03e2ea",
   "metadata": {},
   "source": [
    "### Import test data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "id": "8fb8fb58",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User_ID</th>\n",
       "      <th>Product_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>City_Category</th>\n",
       "      <th>Stay_In_Current_City_Years</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Product_Category_1</th>\n",
       "      <th>Product_Category_2</th>\n",
       "      <th>Product_Category_3</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000004</td>\n",
       "      <td>P00128942</td>\n",
       "      <td>M</td>\n",
       "      <td>46-50</td>\n",
       "      <td>7</td>\n",
       "      <td>B</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>11.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000009</td>\n",
       "      <td>P00113442</td>\n",
       "      <td>M</td>\n",
       "      <td>26-35</td>\n",
       "      <td>17</td>\n",
       "      <td>C</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000010</td>\n",
       "      <td>P00288442</td>\n",
       "      <td>F</td>\n",
       "      <td>36-45</td>\n",
       "      <td>1</td>\n",
       "      <td>B</td>\n",
       "      <td>4+</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000010</td>\n",
       "      <td>P00145342</td>\n",
       "      <td>F</td>\n",
       "      <td>36-45</td>\n",
       "      <td>1</td>\n",
       "      <td>B</td>\n",
       "      <td>4+</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>9.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000011</td>\n",
       "      <td>P00053842</td>\n",
       "      <td>F</td>\n",
       "      <td>26-35</td>\n",
       "      <td>1</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>5.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User_ID Product_ID Gender    Age  Occupation City_Category  \\\n",
       "0  1000004  P00128942      M  46-50           7             B   \n",
       "1  1000009  P00113442      M  26-35          17             C   \n",
       "2  1000010  P00288442      F  36-45           1             B   \n",
       "3  1000010  P00145342      F  36-45           1             B   \n",
       "4  1000011  P00053842      F  26-35           1             C   \n",
       "\n",
       "  Stay_In_Current_City_Years  Marital_Status  Product_Category_1  \\\n",
       "0                          2               1                   1   \n",
       "1                          0               0                   3   \n",
       "2                         4+               1                   5   \n",
       "3                         4+               1                   4   \n",
       "4                          1               0                   4   \n",
       "\n",
       "   Product_Category_2  Product_Category_3  \n",
       "0                11.0                 NaN  \n",
       "1                 5.0                 NaN  \n",
       "2                14.0                 NaN  \n",
       "3                 9.0                 NaN  \n",
       "4                 5.0                12.0  "
      ]
     },
     "execution_count": 372,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test= pd.read_csv(r'C:\\Users\\awadh\\Desktop\\Dataset\\Black_Friday_Test.csv')\n",
    "test.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "120c6032",
   "metadata": {},
   "source": [
    "### Import train data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 373,
   "id": "3da8135e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User_ID</th>\n",
       "      <th>Product_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>City_Category</th>\n",
       "      <th>Stay_In_Current_City_Years</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Product_Category_1</th>\n",
       "      <th>Product_Category_2</th>\n",
       "      <th>Product_Category_3</th>\n",
       "      <th>Purchase</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00069042</td>\n",
       "      <td>F</td>\n",
       "      <td>0-17</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00248942</td>\n",
       "      <td>F</td>\n",
       "      <td>0-17</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>15200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00087842</td>\n",
       "      <td>F</td>\n",
       "      <td>0-17</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00085442</td>\n",
       "      <td>F</td>\n",
       "      <td>0-17</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000002</td>\n",
       "      <td>P00285442</td>\n",
       "      <td>M</td>\n",
       "      <td>55+</td>\n",
       "      <td>16</td>\n",
       "      <td>C</td>\n",
       "      <td>4+</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7969</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User_ID Product_ID Gender   Age  Occupation City_Category  \\\n",
       "0  1000001  P00069042      F  0-17          10             A   \n",
       "1  1000001  P00248942      F  0-17          10             A   \n",
       "2  1000001  P00087842      F  0-17          10             A   \n",
       "3  1000001  P00085442      F  0-17          10             A   \n",
       "4  1000002  P00285442      M   55+          16             C   \n",
       "\n",
       "  Stay_In_Current_City_Years  Marital_Status  Product_Category_1  \\\n",
       "0                          2               0                   3   \n",
       "1                          2               0                   1   \n",
       "2                          2               0                  12   \n",
       "3                          2               0                  12   \n",
       "4                         4+               0                   8   \n",
       "\n",
       "   Product_Category_2  Product_Category_3  Purchase  \n",
       "0                 NaN                 NaN      8370  \n",
       "1                 6.0                14.0     15200  \n",
       "2                 NaN                 NaN      1422  \n",
       "3                14.0                 NaN      1057  \n",
       "4                 NaN                 NaN      7969  "
      ]
     },
     "execution_count": 373,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train= pd.read_csv(r'C:\\Users\\awadh\\Desktop\\Dataset\\Black_Friday_Train.csv')\n",
    "train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee5e8378",
   "metadata": {},
   "source": [
    "### Merge or Concat (Test, train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 374,
   "id": "59ad19fa",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User_ID</th>\n",
       "      <th>Product_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>City_Category</th>\n",
       "      <th>Stay_In_Current_City_Years</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Product_Category_1</th>\n",
       "      <th>Product_Category_2</th>\n",
       "      <th>Product_Category_3</th>\n",
       "      <th>Purchase</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00069042</td>\n",
       "      <td>F</td>\n",
       "      <td>0-17</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8370.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00248942</td>\n",
       "      <td>F</td>\n",
       "      <td>0-17</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>15200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00087842</td>\n",
       "      <td>F</td>\n",
       "      <td>0-17</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1422.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00085442</td>\n",
       "      <td>F</td>\n",
       "      <td>0-17</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1057.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000002</td>\n",
       "      <td>P00285442</td>\n",
       "      <td>M</td>\n",
       "      <td>55+</td>\n",
       "      <td>16</td>\n",
       "      <td>C</td>\n",
       "      <td>4+</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7969.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User_ID Product_ID Gender   Age  Occupation City_Category  \\\n",
       "0  1000001  P00069042      F  0-17          10             A   \n",
       "1  1000001  P00248942      F  0-17          10             A   \n",
       "2  1000001  P00087842      F  0-17          10             A   \n",
       "3  1000001  P00085442      F  0-17          10             A   \n",
       "4  1000002  P00285442      M   55+          16             C   \n",
       "\n",
       "  Stay_In_Current_City_Years  Marital_Status  Product_Category_1  \\\n",
       "0                          2               0                   3   \n",
       "1                          2               0                   1   \n",
       "2                          2               0                  12   \n",
       "3                          2               0                  12   \n",
       "4                         4+               0                   8   \n",
       "\n",
       "   Product_Category_2  Product_Category_3  Purchase  \n",
       "0                 NaN                 NaN    8370.0  \n",
       "1                 6.0                14.0   15200.0  \n",
       "2                 NaN                 NaN    1422.0  \n",
       "3                14.0                 NaN    1057.0  \n",
       "4                 NaN                 NaN    7969.0  "
      ]
     },
     "execution_count": 374,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "awadh=pd.concat([train, test], axis=0)\n",
    "awadh.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "35619f26",
   "metadata": {},
   "source": [
    "## Basic Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 399,
   "id": "0d572841",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(783667, 12)"
      ]
     },
     "execution_count": 399,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "awadh.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "id": "b65a13e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 783667 entries, 0 to 233598\n",
      "Data columns (total 12 columns):\n",
      " #   Column                      Non-Null Count   Dtype  \n",
      "---  ------                      --------------   -----  \n",
      " 0   User_ID                     783667 non-null  int64  \n",
      " 1   Product_ID                  783667 non-null  object \n",
      " 2   Gender                      783667 non-null  object \n",
      " 3   Age                         783667 non-null  object \n",
      " 4   Occupation                  783667 non-null  int64  \n",
      " 5   City_Category               783667 non-null  object \n",
      " 6   Stay_In_Current_City_Years  783667 non-null  object \n",
      " 7   Marital_Status              783667 non-null  int64  \n",
      " 8   Product_Category_1          783667 non-null  int64  \n",
      " 9   Product_Category_2          537685 non-null  float64\n",
      " 10  Product_Category_3          237858 non-null  float64\n",
      " 11  Purchase                    550068 non-null  float64\n",
      "dtypes: float64(3), int64(4), object(5)\n",
      "memory usage: 77.7+ MB\n"
     ]
    }
   ],
   "source": [
    "awadh.info()        # All column and its datatypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 401,
   "id": "75b6a40b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User_ID</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Product_Category_1</th>\n",
       "      <th>Product_Category_2</th>\n",
       "      <th>Product_Category_3</th>\n",
       "      <th>Purchase</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>7.836670e+05</td>\n",
       "      <td>783667.000000</td>\n",
       "      <td>783667.000000</td>\n",
       "      <td>783667.000000</td>\n",
       "      <td>537685.000000</td>\n",
       "      <td>237858.000000</td>\n",
       "      <td>550068.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.003029e+06</td>\n",
       "      <td>8.079300</td>\n",
       "      <td>0.409777</td>\n",
       "      <td>5.366196</td>\n",
       "      <td>9.844506</td>\n",
       "      <td>12.668605</td>\n",
       "      <td>9263.968713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.727267e+03</td>\n",
       "      <td>6.522206</td>\n",
       "      <td>0.491793</td>\n",
       "      <td>3.878160</td>\n",
       "      <td>5.089093</td>\n",
       "      <td>4.125510</td>\n",
       "      <td>5023.065394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000001e+06</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>12.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.001519e+06</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>5823.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.003075e+06</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>8047.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.004478e+06</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>12054.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.006040e+06</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>23961.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            User_ID     Occupation  Marital_Status  Product_Category_1  \\\n",
       "count  7.836670e+05  783667.000000   783667.000000       783667.000000   \n",
       "mean   1.003029e+06       8.079300        0.409777            5.366196   \n",
       "std    1.727267e+03       6.522206        0.491793            3.878160   \n",
       "min    1.000001e+06       0.000000        0.000000            1.000000   \n",
       "25%    1.001519e+06       2.000000        0.000000            1.000000   \n",
       "50%    1.003075e+06       7.000000        0.000000            5.000000   \n",
       "75%    1.004478e+06      14.000000        1.000000            8.000000   \n",
       "max    1.006040e+06      20.000000        1.000000           20.000000   \n",
       "\n",
       "       Product_Category_2  Product_Category_3       Purchase  \n",
       "count       537685.000000       237858.000000  550068.000000  \n",
       "mean             9.844506           12.668605    9263.968713  \n",
       "std              5.089093            4.125510    5023.065394  \n",
       "min              2.000000            3.000000      12.000000  \n",
       "25%              5.000000            9.000000    5823.000000  \n",
       "50%              9.000000           14.000000    8047.000000  \n",
       "75%             15.000000           16.000000   12054.000000  \n",
       "max             18.000000           18.000000   23961.000000  "
      ]
     },
     "execution_count": 401,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "awadh.describe()   #Aggregate Overview of dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7eefd3f",
   "metadata": {},
   "source": [
    "### Converting Categorical Data: Gender"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 403,
   "id": "2779220b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User_ID</th>\n",
       "      <th>Product_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>City_Category</th>\n",
       "      <th>Stay_In_Current_City_Years</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Product_Category_1</th>\n",
       "      <th>Product_Category_2</th>\n",
       "      <th>Product_Category_3</th>\n",
       "      <th>Purchase</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00069042</td>\n",
       "      <td>0</td>\n",
       "      <td>0-17</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8370.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00248942</td>\n",
       "      <td>0</td>\n",
       "      <td>0-17</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>15200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00087842</td>\n",
       "      <td>0</td>\n",
       "      <td>0-17</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1422.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00085442</td>\n",
       "      <td>0</td>\n",
       "      <td>0-17</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1057.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000002</td>\n",
       "      <td>P00285442</td>\n",
       "      <td>1</td>\n",
       "      <td>55+</td>\n",
       "      <td>16</td>\n",
       "      <td>C</td>\n",
       "      <td>4+</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7969.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User_ID Product_ID  Gender   Age  Occupation City_Category  \\\n",
       "0  1000001  P00069042       0  0-17          10             A   \n",
       "1  1000001  P00248942       0  0-17          10             A   \n",
       "2  1000001  P00087842       0  0-17          10             A   \n",
       "3  1000001  P00085442       0  0-17          10             A   \n",
       "4  1000002  P00285442       1   55+          16             C   \n",
       "\n",
       "  Stay_In_Current_City_Years  Marital_Status  Product_Category_1  \\\n",
       "0                          2               0                   3   \n",
       "1                          2               0                   1   \n",
       "2                          2               0                  12   \n",
       "3                          2               0                  12   \n",
       "4                         4+               0                   8   \n",
       "\n",
       "   Product_Category_2  Product_Category_3  Purchase  \n",
       "0                 NaN                 NaN    8370.0  \n",
       "1                 6.0                14.0   15200.0  \n",
       "2                 NaN                 NaN    1422.0  \n",
       "3                14.0                 NaN    1057.0  \n",
       "4                 NaN                 NaN    7969.0  "
      ]
     },
     "execution_count": 403,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#awadh['Gender']=awadh['Gender'].map({'M':1,'F':0})\n",
    "awadh.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca899540",
   "metadata": {},
   "source": [
    "## Converting categorical data: Age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 404,
   "id": "3ed1252e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['0-17', '55+', '26-35', '46-50', '51-55', '36-45', '18-25'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 404,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "awadh['Age'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 406,
   "id": "d70ddf45",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User_ID</th>\n",
       "      <th>Product_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>City_Category</th>\n",
       "      <th>Stay_In_Current_City_Years</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Product_Category_1</th>\n",
       "      <th>Product_Category_2</th>\n",
       "      <th>Product_Category_3</th>\n",
       "      <th>Purchase</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00069042</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8370.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00248942</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>15200.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00087842</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1422.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00085442</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1057.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000002</td>\n",
       "      <td>P00285442</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>16</td>\n",
       "      <td>C</td>\n",
       "      <td>4+</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7969.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User_ID Product_ID  Gender  Age  Occupation City_Category  \\\n",
       "0  1000001  P00069042       0    1          10             A   \n",
       "1  1000001  P00248942       0    1          10             A   \n",
       "2  1000001  P00087842       0    1          10             A   \n",
       "3  1000001  P00085442       0    1          10             A   \n",
       "4  1000002  P00285442       1    7          16             C   \n",
       "\n",
       "  Stay_In_Current_City_Years  Marital_Status  Product_Category_1  \\\n",
       "0                          2               0                   3   \n",
       "1                          2               0                   1   \n",
       "2                          2               0                  12   \n",
       "3                          2               0                  12   \n",
       "4                         4+               0                   8   \n",
       "\n",
       "   Product_Category_2  Product_Category_3  Purchase  \n",
       "0                 NaN                 NaN    8370.0  \n",
       "1                 6.0                14.0   15200.0  \n",
       "2                 NaN                 NaN    1422.0  \n",
       "3                14.0                 NaN    1057.0  \n",
       "4                 NaN                 NaN    7969.0  "
      ]
     },
     "execution_count": 406,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#awadh['Age']= awadh['Age'].map({'0-17':1,'18-25':2,'26-35':3,'36-45':4,'46-50':5,'51-55':6,'55+':7})\n",
    "awadh.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bcfead8c",
   "metadata": {},
   "source": [
    "## Converting Categorical data: City_Category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 407,
   "id": "cf6f4c2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   B  C\n",
       "0  0  0\n",
       "1  0  0\n",
       "2  0  0\n",
       "3  0  0\n",
       "4  0  1"
      ]
     },
     "execution_count": 407,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "City=pd.get_dummies(awadh['City_Category'], drop_first=True)\n",
    "City.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b0243975",
   "metadata": {},
   "source": [
    "### Merging City with awadh (Main_dataset)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 409,
   "id": "438a962a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User_ID</th>\n",
       "      <th>Product_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>City_Category</th>\n",
       "      <th>Stay_In_Current_City_Years</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Product_Category_1</th>\n",
       "      <th>Product_Category_2</th>\n",
       "      <th>Product_Category_3</th>\n",
       "      <th>Purchase</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00069042</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8370.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00248942</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>15200.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00087842</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1422.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000001</td>\n",
       "      <td>P00085442</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>A</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1057.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000002</td>\n",
       "      <td>P00285442</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>16</td>\n",
       "      <td>C</td>\n",
       "      <td>4+</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7969.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User_ID Product_ID  Gender  Age  Occupation City_Category  \\\n",
       "0  1000001  P00069042       0    1          10             A   \n",
       "1  1000001  P00248942       0    1          10             A   \n",
       "2  1000001  P00087842       0    1          10             A   \n",
       "3  1000001  P00085442       0    1          10             A   \n",
       "4  1000002  P00285442       1    7          16             C   \n",
       "\n",
       "  Stay_In_Current_City_Years  Marital_Status  Product_Category_1  \\\n",
       "0                          2               0                   3   \n",
       "1                          2               0                   1   \n",
       "2                          2               0                  12   \n",
       "3                          2               0                  12   \n",
       "4                         4+               0                   8   \n",
       "\n",
       "   Product_Category_2  Product_Category_3  Purchase  B  C  \n",
       "0                 NaN                 NaN    8370.0  0  0  \n",
       "1                 6.0                14.0   15200.0  0  0  \n",
       "2                 NaN                 NaN    1422.0  0  0  \n",
       "3                14.0                 NaN    1057.0  0  0  \n",
       "4                 NaN                 NaN    7969.0  0  1  "
      ]
     },
     "execution_count": 409,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#awadh=pd.concat([awadh,City], axis=1)\n",
    "awadh.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c06f9668",
   "metadata": {},
   "source": [
    "# Creating awadh= awadh1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "id": "81fdcfa0",
   "metadata": {},
   "outputs": [],
   "source": [
    "awadh1=awadh"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f821700",
   "metadata": {},
   "source": [
    "### Dropping City_Category column  (Because  B,C ( after merging) its there)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 429,
   "id": "e3cf42bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Stay_In_Current_City_Years</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Product_Category_1</th>\n",
       "      <th>Product_Category_2</th>\n",
       "      <th>Product_Category_3</th>\n",
       "      <th>Purchase</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>P00069042</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8370.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>P00248942</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>15200.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>P00087842</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1422.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>P00085442</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1057.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>P00285442</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>16</td>\n",
       "      <td>4+</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7969.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Product_ID  Gender  Age  Occupation Stay_In_Current_City_Years  \\\n",
       "0  P00069042       0    1          10                          2   \n",
       "1  P00248942       0    1          10                          2   \n",
       "2  P00087842       0    1          10                          2   \n",
       "3  P00085442       0    1          10                          2   \n",
       "4  P00285442       1    7          16                         4+   \n",
       "\n",
       "   Marital_Status  Product_Category_1  Product_Category_2  Product_Category_3  \\\n",
       "0               0                   3                 NaN                 NaN   \n",
       "1               0                   1                 6.0                14.0   \n",
       "2               0                  12                 NaN                 NaN   \n",
       "3               0                  12                14.0                 NaN   \n",
       "4               0                   8                 NaN                 NaN   \n",
       "\n",
       "   Purchase  B  C  \n",
       "0    8370.0  0  0  \n",
       "1   15200.0  0  0  \n",
       "2    1422.0  0  0  \n",
       "3    1057.0  0  0  \n",
       "4    7969.0  0  1  "
      ]
     },
     "execution_count": 429,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#awadh1=awadh.drop('City_Category', axis=1)\n",
    "awadh1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6398d6ac",
   "metadata": {},
   "source": [
    "### Dropping User_ID column (No use)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "id": "56822bc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#awadh1.drop('User_ID', axis=1, inplace=True)                 #Inplace help to save the operation as permanent  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 430,
   "id": "b710b746",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Stay_In_Current_City_Years</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Product_Category_1</th>\n",
       "      <th>Product_Category_2</th>\n",
       "      <th>Product_Category_3</th>\n",
       "      <th>Purchase</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>P00069042</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8370.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>P00248942</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>14.0</td>\n",
       "      <td>15200.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>P00087842</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1422.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>P00085442</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>14.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1057.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>P00285442</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>16</td>\n",
       "      <td>4+</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7969.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Product_ID  Gender  Age  Occupation Stay_In_Current_City_Years  \\\n",
       "0  P00069042       0    1          10                          2   \n",
       "1  P00248942       0    1          10                          2   \n",
       "2  P00087842       0    1          10                          2   \n",
       "3  P00085442       0    1          10                          2   \n",
       "4  P00285442       1    7          16                         4+   \n",
       "\n",
       "   Marital_Status  Product_Category_1  Product_Category_2  Product_Category_3  \\\n",
       "0               0                   3                 NaN                 NaN   \n",
       "1               0                   1                 6.0                14.0   \n",
       "2               0                  12                 NaN                 NaN   \n",
       "3               0                  12                14.0                 NaN   \n",
       "4               0                   8                 NaN                 NaN   \n",
       "\n",
       "   Purchase  B  C  \n",
       "0    8370.0  0  0  \n",
       "1   15200.0  0  0  \n",
       "2    1422.0  0  0  \n",
       "3    1057.0  0  0  \n",
       "4    7969.0  0  1  "
      ]
     },
     "execution_count": 430,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "awadh1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ff037a39",
   "metadata": {},
   "source": [
    "# Missing Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 431,
   "id": "0807add5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Product_ID                         0\n",
       "Gender                             0\n",
       "Age                                0\n",
       "Occupation                         0\n",
       "Stay_In_Current_City_Years         0\n",
       "Marital_Status                     0\n",
       "Product_Category_1                 0\n",
       "Product_Category_2            245982\n",
       "Product_Category_3            545809\n",
       "Purchase                      233599\n",
       "B                                  0\n",
       "C                                  0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 431,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "awadh1.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b2793a4",
   "metadata": {},
   "source": [
    "### Product_Category_2  Same value occurence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 432,
   "id": "3800b6fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8.0     91317\n",
       "14.0    78834\n",
       "2.0     70498\n",
       "16.0    61687\n",
       "15.0    54114\n",
       "5.0     37165\n",
       "4.0     36705\n",
       "6.0     23575\n",
       "11.0    20230\n",
       "17.0    19104\n",
       "13.0    15054\n",
       "9.0      8177\n",
       "12.0     7801\n",
       "10.0     4420\n",
       "3.0      4123\n",
       "18.0     4027\n",
       "7.0       854\n",
       "Name: Product_Category_2, dtype: int64"
      ]
     },
     "execution_count": 432,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "awadh1['Product_Category_2'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9f8499d8",
   "metadata": {},
   "source": [
    "#### MODE used to replace "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 433,
   "id": "9317bf82",
   "metadata": {},
   "outputs": [],
   "source": [
    "awadh1['Product_Category_2']=   awadh1['Product_Category_2'].mode()[0] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 434,
   "id": "442a7218",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 434,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "awadh1['Product_Category_2'].isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0fc89dc7",
   "metadata": {},
   "source": [
    "### Product_category_3 Value_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 435,
   "id": "f48be3cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16.0    46469\n",
       "15.0    39968\n",
       "14.0    26283\n",
       "17.0    23818\n",
       "5.0     23799\n",
       "8.0     17861\n",
       "9.0     16532\n",
       "12.0    13115\n",
       "13.0     7849\n",
       "6.0      6888\n",
       "18.0     6621\n",
       "4.0      2691\n",
       "11.0     2585\n",
       "10.0     2501\n",
       "3.0       878\n",
       "Name: Product_Category_3, dtype: int64"
      ]
     },
     "execution_count": 435,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "awadh1['Product_Category_3'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "764c7a72",
   "metadata": {},
   "source": [
    "#### MODE used to replace"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 436,
   "id": "98960902",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Product_ID                         0\n",
       "Gender                             0\n",
       "Age                                0\n",
       "Occupation                         0\n",
       "Stay_In_Current_City_Years         0\n",
       "Marital_Status                     0\n",
       "Product_Category_1                 0\n",
       "Product_Category_2                 0\n",
       "Product_Category_3                 0\n",
       "Purchase                      233599\n",
       "B                                  0\n",
       "C                                  0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 436,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "awadh1['Product_Category_3']=   awadh1['Product_Category_3'].mode()[0] \n",
    "awadh1.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 437,
   "id": "760aa595",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\awadh\\AppData\\Local\\Temp\\ipykernel_19448\\1676547571.py:2: FutureWarning: The default value of regex will change from True to False in a future version. In addition, single character regular expressions will *not* be treated as literal strings when regex=True.\n",
      "  awadh1['Stay_In_Current_City_Years']=  awadh1['Stay_In_Current_City_Years'].str.replace(\"+\",\"\")\n"
     ]
    }
   ],
   "source": [
    "#Replacing 4+ in stay_current_city_years to 4\n",
    "#awadh1['Stay_In_Current_City_Years']=  awadh1['Stay_In_Current_City_Years'].str.replace(\"+\",\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 438,
   "id": "eaaa7311",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Product_ID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Stay_In_Current_City_Years</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Product_Category_1</th>\n",
       "      <th>Product_Category_2</th>\n",
       "      <th>Product_Category_3</th>\n",
       "      <th>Purchase</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>P00069042</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>8370.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>P00248942</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>15200.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>P00087842</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1422.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>P00085442</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1057.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>P00285442</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>16</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>7969.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  Product_ID  Gender  Age  Occupation Stay_In_Current_City_Years  \\\n",
       "0  P00069042       0    1          10                          2   \n",
       "1  P00248942       0    1          10                          2   \n",
       "2  P00087842       0    1          10                          2   \n",
       "3  P00085442       0    1          10                          2   \n",
       "4  P00285442       1    7          16                          4   \n",
       "\n",
       "   Marital_Status  Product_Category_1  Product_Category_2  Product_Category_3  \\\n",
       "0               0                   3                 8.0                16.0   \n",
       "1               0                   1                 8.0                16.0   \n",
       "2               0                  12                 8.0                16.0   \n",
       "3               0                  12                 8.0                16.0   \n",
       "4               0                   8                 8.0                16.0   \n",
       "\n",
       "   Purchase  B  C  \n",
       "0    8370.0  0  0  \n",
       "1   15200.0  0  0  \n",
       "2    1422.0  0  0  \n",
       "3    1057.0  0  0  \n",
       "4    7969.0  0  1  "
      ]
     },
     "execution_count": 438,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "awadh1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e0a9c35",
   "metadata": {},
   "source": [
    "### Converting ['Stay_In_Current_City_Years']  OBJECT to INT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 440,
   "id": "9384b66e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 783667 entries, 0 to 233598\n",
      "Data columns (total 12 columns):\n",
      " #   Column                      Non-Null Count   Dtype  \n",
      "---  ------                      --------------   -----  \n",
      " 0   Product_ID                  783667 non-null  object \n",
      " 1   Gender                      783667 non-null  int64  \n",
      " 2   Age                         783667 non-null  int64  \n",
      " 3   Occupation                  783667 non-null  int64  \n",
      " 4   Stay_In_Current_City_Years  783667 non-null  int32  \n",
      " 5   Marital_Status              783667 non-null  int64  \n",
      " 6   Product_Category_1          783667 non-null  int64  \n",
      " 7   Product_Category_2          783667 non-null  float64\n",
      " 8   Product_Category_3          783667 non-null  float64\n",
      " 9   Purchase                    550068 non-null  float64\n",
      " 10  B                           783667 non-null  uint8  \n",
      " 11  C                           783667 non-null  uint8  \n",
      "dtypes: float64(3), int32(1), int64(5), object(1), uint8(2)\n",
      "memory usage: 64.3+ MB\n"
     ]
    }
   ],
   "source": [
    "awadh1['Stay_In_Current_City_Years']=  awadh1['Stay_In_Current_City_Years'].astype(int)\n",
    "awadh1.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b957836a",
   "metadata": {},
   "source": [
    "### Converting 'B' and 'C' column  'unint' datatype to 'INT' "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 441,
   "id": "934b8d3c",
   "metadata": {},
   "outputs": [],
   "source": [
    "awadh1['B']=  awadh1['B'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "id": "1954dfae",
   "metadata": {},
   "outputs": [],
   "source": [
    "awadh1['C']=  awadh1['C'].astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 443,
   "id": "897cc56e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 783667 entries, 0 to 233598\n",
      "Data columns (total 12 columns):\n",
      " #   Column                      Non-Null Count   Dtype  \n",
      "---  ------                      --------------   -----  \n",
      " 0   Product_ID                  783667 non-null  object \n",
      " 1   Gender                      783667 non-null  int64  \n",
      " 2   Age                         783667 non-null  int64  \n",
      " 3   Occupation                  783667 non-null  int64  \n",
      " 4   Stay_In_Current_City_Years  783667 non-null  int32  \n",
      " 5   Marital_Status              783667 non-null  int64  \n",
      " 6   Product_Category_1          783667 non-null  int64  \n",
      " 7   Product_Category_2          783667 non-null  float64\n",
      " 8   Product_Category_3          783667 non-null  float64\n",
      " 9   Purchase                    550068 non-null  float64\n",
      " 10  B                           783667 non-null  int32  \n",
      " 11  C                           783667 non-null  int32  \n",
      "dtypes: float64(3), int32(3), int64(5), object(1)\n",
      "memory usage: 68.8+ MB\n"
     ]
    }
   ],
   "source": [
    "awadh1.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76cd0777",
   "metadata": {},
   "source": [
    "# Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 444,
   "id": "926fe4a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Purchse by Age')"
      ]
     },
     "execution_count": 444,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Age',y='Purchase', data=awadh1, hue='Gender')\n",
    "plt.title('Purchse by Age')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 445,
   "id": "6d804999",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Purchse by Gender')"
      ]
     },
     "execution_count": 445,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAY4AAAEaCAYAAAAG87ApAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/YYfK9AAAACXBIWXMAAAsTAAALEwEAmpwYAAAZw0lEQVR4nO3de5hdVZnn8e8iUQQFW42EFEHB7mgbUFEEQXsU24aOl2fAsXs13ghyyYjctZWLrYPdoxPEBnm80EbUhBbFt0UbnhEJito9agDR8QbRAQUlJBJKRAJEIGHPH3uVHotK6qyk6pxTqe/nec5TZ699e0/l5Pxq7bX3PqlpGiRJ6tZ2/S5AkjS1GBySpCoGhySpisEhSapicEiSqhgckqQqBoemlZTSrSmlf+jDfpemlL7a6/32SkrpoJRSk1Ka2+9aNPkMDvVc+RBtymNDSukXKaV/SSk9qd+1TUUppRkppbeklFaklH6bUrovpbQypfTJlNLz+12ftj0Gh/rl/wBzgD2Ak4DXABdtzQZTSo/e+rKmlpTSo4AvAYuBfwf+GtgbOA74OXBu34qrlFLaLqU0o991aHwGh/rlwaZpftU0zaqmaS4DPggsSCntkFI6MqW0oXPhlNLc0kM5qEyPHBp5ZUrpmyml3wGLyrzjU0o3ppQeSCmtTSl9ftS+H51SOj+ldFdK6Y6U0gc6P7BSSn+RUvpWSmldefwgpfTXHfNnl17TnWX+t1JKL+7mRaeU3ppSuj2ldH9K6dKU0qzS/tKU0saU0u6jll9Y9rHTJjZ5EnAIcHDTNGc3TXNN0zS3NE3zjaZp/ifwklHbO7jUu77U8anOnt7IIbWU0qLSE7wnpXRZSunJo7ZzYkppVXkdy4GnjPFa900pXZVSurf8rr6QUnpqx/yzUko3p5T+LqX0E+BB4Jnd/B7VXwaHBsV62vfjzMr1/hl4P+0Hzr+nlN4DnA18FHgWsAD4/qh1TgTWAC+g/eA9BTgC2sM+wOXAtcDzyuMs4P4yfwfg68BOwMuB5wJXAF9JKY33obc/cFCp6RXAs4FPAjRN83XgJuCoUescA1zSNM26TWzzjcBXm6a5dqyZTcc9hVJKfwlcBlxS9n0YbY/viyml1LHafsBLgVeWWvcBPtCxnUOB82h7M/sAAZzTud+U0nzgP4AVwPOBvwQ20v6eHtOx6BDwFuBIYD7wi028Tg2Spml8+OjpA1hK+2E3Mj0f+BlwTZk+Etgwap25QAMcVKYPKtNv7FjmsbQB9Peb2fetwOWj2q4EPlueP6FzP2OsfySwCpg5qv1rwAfHec33Ao/vaDuk7GtemX4r7QfndmX6GWX+fpvZ7v3A+aPazi77Gnk8pbR/A1g8atmnlH3s01HnncD2HcucDqzpmP4mcPGo7XygbGdux3YuGbXM9qXew8r0WcDDI/X5mDoPexzql4PKIYz1wI9pj8e/bgu2c13H872AxwBXjbPO90dN3w7MBmia5jfAhcDylNKXU0qnp5Se0bHsfsCuwN2l/ntTSvcC/wWYN85+b2ya5rcd098qP0d6KkuBXWjHKQCOBX7QNM13xtnuaOfQ9gSOpg3Tkf/n+wGnjKr7xjKvs/aVTdM80DH9+99PMR/49qh9fnPU9H7Aq0ft69e0/z6d+7qjaZpfVr069V3tYQFpolwLLAQ20P412/lB9fAYyz9qE9u5b4y28W75/OAYy//+j6imaY5NKZ1PGTsA/imldELTNB8ry60EXj3Gdu8fZ7+b1TTNXWU85tjUnrp7BO1f5Zvz/2g/yDu3MwwMp5R2HbXsdrS9kX8dYzu/6ng+1u8njdG2OduV/SweY96vO56P9e+nAWdwqF/WN01z8ybmrQVmpJRmN01zR2l7XhfbvBH4He1f7D/amuKapvkxbU/o3JTSv9AOvH8MuJ72A/2epmnWVm72mSmlnZumuadMv7D8XNmxzMdox1DeTNtbuHicbX4aeH9K6cCmaVaMs+z1wF6b+b1360bgRbTjSCNeNMa+ng38rCnHpbTt8FCVBtF1wDpgcUppXkppAfDu8VZqmuZe2sHys8qZVU9PKT0npXRGtztOKf1ZSunscmbVU1NKB9Iehho5pHMxcAvwpZTSISmlPVJKL0gpnZFSOmy8EoGLUkp7l7OwPgJ8qWmamzpewzeBn9KOGcSoQ1tjOR+4GriqHFZ7Qan7hZSzzGgHpaH9HR6aUjovpbRPSulPU0oLUkqfKIP+3fpn4O9SSieXf5830Q7Sd3of7SG4T6eU9k8p7VnOHDs/pfS0in1pABkcGjhN09wFvBY4APgh8C7gHV2u/i7gnbRnS/2Ydryjm97KiPtoj8FfQnsY6FLa4/knlNp+R3uK6/XAp8oyX6A9Y2q8M4Kuox0L+AqwHLgBeNMYy30ceDSwZLxim6Z5iPbsrjNpD599lfbsrM/S/v/+i6ZpbivLfp327KZn0V5H80Pas6PWAQ+Nt6+OfX4ReBvtv8kPgdcDp41aZiVtj+px5bXeWF7XDsDd3e5LgynZi5QGS0rp/cDLm6Z5Vr9rkcbiGIc0IFJKj6ftDRwLnNrncqRNsschDYiU0jdoL0r8HHBU0zRjnV0m9Z3BIUmq4uC4JKnKdBnjsFslSVtm9MWf0yY4WL16db9LkKQpZWhoaMx2D1VJkqoYHJKkKgaHJKmKwSFJqmJwSJKqGBySpCoGhySpisEhSapicEiSqkybK8elbdWRy8b7xlhNR0sXHjhp27bHIUmqYnBIkqoYHJKkKgaHJKmKwSFJqmJwSJKqGBySpCoGhySpisEhSapicEiSqhgckqQqBockqYrBIUmq4t1x1bWzzz6b4eFhZs2axWmnndbvciT1icHRhTVvP6bfJQyEX935IMMbGzbceYe/E2DOORf2uwSpLzxUJUmqYo9DXXvCDIBUfkqargwOde3YJz663yVIGgAeqpIkVTE4JElVDA5JUhWDQ5JUxeCQJFUxOCRJVQwOSVIVg0OSVMXgkCRV6dmV4znnU4FjgAb4EfAmYEfgc8AewK1AjojflOXPAI4GNgInRcTy0r4vsBTYAbgCODkiml69Dkma7nrS48g57wacBDw/IvYGZgCHA6cDV0fEPODqMk3OeX6ZvxewAPhoznnkDkkXAIuAeeWxoBevQZLU6uWhqpnADjnnmbQ9jdXAocCyMn8ZcFh5fihwSUQ8EBG3ADcD++ec5wA7R8SK0su4qGMdSVIP9CQ4IuJ24APAL4E1wG8j4ipgdkSsKcusAXYpq+wG3NaxiVWlbbfyfHS7JKlHejLGkXN+Am0vYk/gbuDfcs5v2MwqaYy2ZjPtY+1zEe0hLSKCWbNm1ZT8R9Zs8Zralm3Ne0qabJP5/uzV4PhfAbdExJ0AOecvAC8E7sg5z4mINeUw1Nqy/Cpg947159Ie2lpVno9uf4SIWAIsKZPN8PDwRL0WCQDfUxpkE/H+HBoaGrO9V8HxS+CAnPOOwHrgZcD1wH3AQmBx+XlZWf5y4DM553OBIdpB8OsiYmPOeV3O+QDgWuAI4EM9eg2SJHo3xnEt8Hnge7Sn4m5H2xtYDBycc74JOLhMExE3AAHcCFwJHB8RG8vmjgMupB0w/xnw5V68BklSKzXNtLgEolm9eswjWl1Z8/ZjJrAUbSvmnHNhv0sA4MhlK/pdggbQ0oUHbvU2yqGqR4wte+W4JKmKwSFJqmJwSJKqGBySpCoGhySpisEhSapicEiSqhgckqQqBockqYrBIUmqYnBIkqoYHJKkKgaHJKmKwSFJqmJwSJKqGBySpCoGhySpisEhSapicEiSqhgckqQqBockqYrBIUmqYnBIkqoYHJKkKgaHJKmKwSFJqmJwSJKqGBySpCoGhySpisEhSapicEiSqhgckqQqBockqYrBIUmqYnBIkqrM7NWOcs5/AlwI7A00wFHAT4HPAXsAtwI5In5Tlj8DOBrYCJwUEctL+77AUmAH4Arg5IhoevU6JGm662WP43zgyoj4c+A5wErgdODqiJgHXF2myTnPBw4H9gIWAB/NOc8o27kAWATMK48FPXwNkjTt9SQ4cs47Ay8GPgEQEQ9GxN3AocCystgy4LDy/FDgkoh4ICJuAW4G9s85zwF2jogVpZdxUcc6kqQe6PpQVc55e+DdwGuBJ0XE43POhwBPj4gPj7P604A7gU/lnJ8DfBc4GZgdEWsAImJNznmXsvxuwDUd668qbQ+V56Pbx6p3EW3PhIhg1qxZ3b7UR1izxWtqW7Y17ylpsk3m+7NmjOM82g/p1wNfLm03lPbxgmMm8DzgxIi4Nud8PuWw1CakMdqazbQ/QkQsAZaMLDM8PDxOiVId31MaZBPx/hwaGhqzveZQ1auB10XECuBhgIi4nU38xT/KKmBVRFxbpj9PGyR3lMNPlJ9rO5bfvWP9ucDq0j53jHZJUo/UBMeDjOqh5JyfDPx6vBUj4lfAbTnnZ5SmlwE3ApcDC0vbQuCy8vxy4PCc8/Y55z1pB8GvK4e11uWcD8g5J+CIjnUkST1QExz/BiwrH+QjPYQPA5d0uf6JwMU55x8C+wDvAxYDB+ecbwIOLtNExA1A0IbLlcDxEbGxbOc42tN6bwZ+xh8Om0mSeqBmjONM4P3Aj4AdgZuAjwPv6WbliPg+8PwxZr1sE8u/F3jvGO3X014LIknqg66DIyIeBE4BTimHqIa98E6Spp+uD1XlnOfnnGeXyfXAWTnnd+ecd5yc0iRJg6hmjOMzwJ+U5x+gvaDvQOBjE1yTJGmA1Yxx7BERPy1nM72a9nYg64FbJqUySdJAqulxPJBz3gnYH7gtIoaBB4DHTEplkqSBVNPj+AzwNWAn/nCl+POwxyFJ00rXPY6IOBV4J3Bcx72pHgZOnYzCJEmDqer7OCLiqlHT109sOZKkQVdzd9yZwFuAlwCz6LjhYES8eOJLkyQNoprB8fOA/w78J7AvcCmwC+24hyRpmqgJjv8GvDwizgc2lJ+HAS+djMIkSYOpJjh2BG4rz9fnnHeMiJ8Az534siRJg6pmcHwlsB9wHXA97S1H7gFun4zCJEmDqSY4TgZGbm3+VuAC2ms6Fk10UZKkwVVzd9zvdDy/CfirSalIkjTQqq7jKN/g9xzgcZ3tEfHJiSxKkjS4aq7jOBN4N/AD4P6OWQ1gcEjSNFHT4zgF2D8ifjhJtUiSpoCa03HXAz+ZrEIkSVPDZnscOefOYHkX8KGc81nAHZ3LRcTDE1+aJGkQjXeoagPtGAb84d5Ux3TMT2X+jAmuS5I0oMYLjj17UoUkacrYbHBExC9GnuectwcejoiHOtoeRd04iSRpiqv50P8K7V1xO+0LLJ+4ciRJg64mOJ4FXDuq7TraCwIlSdNETXD8Fpg9qm02cN/ElSNJGnQ1FwBeCnwm53wS8HPgT4FzgZiMwiRJg6mmx/FO2lurXwesA66hvSDwjEmoS5I0oLrqceScZwBn0t5O/QTa7xwfjohmsytKkrY5XQVHRGzMOR8PnFXC4s7JLUuSNKhqDlUtA948WYVIkqaGmsHx/YETc87voP3u8d8fpoqIF090YZKkwVQTHB8vD0nSNFbz1bHLJrMQSdLUUPMNgEdtap5fHStJ00fNoao3jprelfYiwG/R5VfHltN6rwduj4hX5ZyfCHwO2AO4FcgR8Zuy7BnA0cBG4KSIWF7a9wWWAjsAVwAne1qwJPVOzaGql45uK72QZ1bs72Taiwh3LtOnA1dHxOKc8+ll+rSc83zgcGAvYAj4as756RGxEbgAWER7AeIVwALgyxU1SJK2wtbeEn0pba9gXDnnucArgQs7mg+lPc2X8vOwjvZLIuKBiLgFuBnYP+c8B9g5IlaUXsZFHetIknqgZoxjdMjsCLwBuLvLTXwQeAewU0fb7IhYAxARa3LOu5T23Wh7FCNWlbaHyvPR7WPVu4i2Z0JEMGvWrC7LfKQ1W7ymtmVb856SJttkvj9rxjg6v0Z2xO3AseOtmHN+FbA2Ir6bcz6oi32lMdqazbQ/QkQsAZaMLDM8PNzFbqXu+Z7SIJuI9+fQ0NCY7eMGR855R+AfgC8BdwH/C1gP3BcR3Vb2IuC/5pxfATwG2Dnn/GngjpzznNLbmAOsLcuvAnbvWH8usLq0zx2jXZLUI930OD4M7Ec7AP0K4PiIOLFmJxFxBuUuuqXH8fcR8Yac8znAQmBx+XlZWeVy2lu4n0s7OD4PuK7cM2tdzvkA2i+VOgL4UE0tkqSt083g+MuBQyLiHeX5qyZw/4uBg3PONwEHl2ki4gba7/m4EbiSNqw2lnWOox1gvxn4GZ5RJUk9lZpm85dA5JzviYidO6bviognTnplE6tZvXrLj2itefsxE1iKthVzzrlw/IV64MhlK/pdggbQ0oUHbvU2yhjHI8aWuzlUNTPn/NKOlUdPExFf2+oKJUlTQjfBsZY/vjL816OmG+BpE1mUJGlwjRscEbFHD+qQJE0RW3vluCRpmjE4JElVDA5JUhWDQ5JUxeCQJFUxOCRJVQwOSVIVg0OSVMXgkCRVMTgkSVUMDklSFYNDklTF4JAkVTE4JElVDA5JUhWDQ5JUxeCQJFUxOCRJVQwOSVIVg0OSVMXgkCRVMTgkSVUMDklSFYNDklTF4JAkVTE4JElVDA5JUhWDQ5JUxeCQJFUxOCRJVQwOSVIVg0OSVGVmL3aSc94duAjYFXgYWBIR5+ecnwh8DtgDuBXIEfGbss4ZwNHARuCkiFhe2vcFlgI7AFcAJ0dE04vXIUnqXY9jA/C2iHgmcABwfM55PnA6cHVEzAOuLtOUeYcDewELgI/mnGeUbV0ALALmlceCHr0GSRI9Co6IWBMR3yvP1wErgd2AQ4FlZbFlwGHl+aHAJRHxQETcAtwM7J9zngPsHBErSi/joo51JEk90JNDVZ1yznsAzwWuBWZHxBpowyXnvEtZbDfgmo7VVpW2h8rz0e1j7WcRbc+EiGDWrFlbXPOaLV5T27KteU9Jk20y3589DY6c8+OAS4FTIuKenPOmFk1jtDWbaX+EiFgCLBlZZnh4uLJaafN8T2mQTcT7c2hoaMz2np1VlXN+FG1oXBwRXyjNd5TDT5Sfa0v7KmD3jtXnAqtL+9wx2iVJPdKT4Mg5J+ATwMqIOLdj1uXAwvJ8IXBZR/vhOeftc8570g6CX1cOa63LOR9QtnlExzqSpB7o1aGqFwFvBH6Uc/5+aTsTWAxEzvlo4JfA3wJExA055wBupD0j6/iI2FjWO44/nI775fKQJPVIapppcQlEs3r1lh/RWvP2YyawFG0r5pxzYb9LAODIZSv6XYIG0NKFB271NsoYxyPGlr1yXJJUxeCQJFUxOCRJVQwOSVIVg0OSVMXgkCRVMTgkSVUMDklSFYNDklTF4JAkVTE4JElVDA5JUhWDQ5JUxeCQJFUxOCRJVQwOSVIVg0OSVMXgkCRVMTgkSVUMDklSFYNDklTF4JAkVTE4JElVDA5JUhWDQ5JUxeCQJFUxOCRJVQwOSVIVg0OSVMXgkCRVMTgkSVUMDklSFYNDklTF4JAkVTE4JElVZva7gC2Rc14AnA/MAC6MiMV9LkmSpo0p1+PIOc8APgK8HJgPvDbnPL+/VUnS9DHlggPYH7g5In4eEQ8ClwCH9rkmSZo2puKhqt2A2zqmVwEvGL1QznkRsAggIhgaGtriHQ5dfMUWrytNtqvOeE2/S9A0MxWDI43R1oxuiIglwJLJL2d6yTlfHxHP73cd0lh8f/bGVDxUtQrYvWN6LrC6T7VI0rQzFXsc3wHm5Zz3BG4HDgde19+SJGn6mHI9jojYAJwALAdWtk1xQ3+rmlY8/KdB5vuzB1LTPGJ4QJKkTZpyPQ5JUn8ZHJKkKlNxcFx94q1eNKhyzp8EXgWsjYi9+13Pts4eh7rirV404JYCC/pdxHRhcKhb3upFAysi/hO4q991TBcGh7o11q1edutTLZL6yOBQt7q61YukbZ/BoW55qxdJgGdVqXve6kUS4JXjqpBzfgXwQdrTcT8ZEe/tb0VSK+f8WeAgYBZwB/A/IuITfS1qG2ZwSJKqOMYhSapicEiSqhgckqQqBockqYrBIUmqYnBIAyrnfGTO+Zv9rkMazQsApUo558OBU4G9gfuAW4BlwAUR4fnt2ubZ45Aq5JzfRvudJOcAuwKzgTcDLwIe3cfS/ki5Db40KexxSF3KOT8e+EfgiIi4tGPW/wVeX5bZHngvkIHtgS8Cp0bE+pzzQcCngfOA04CNwJkR8amy7pOAT9FeAf0TYPmo/f858CFgX+BO4F0REWXeUmA98FTgJbS3vP/qRL5+aYQ9Dql7B9KGwWWbWeZs4OnAPsCf0d56/t0d83cFHl/ajwY+knN+Qpn3EeB3wBzgqPIAIOf8WOArwGeAXYDXAh/NOe/Vse3X0YbWToBjI5o09jik7s0ChiNiw0hDzvnbtN+IuD3tN9AdCzw7Iu4q899H+2F/RlnlIeAfyzauyDnfCzwj5/wd4DXAsyLiPuDHOedlwIvLeq8Cbh3pnQDfyzlfCvwNcENpuywivlWe/26CX7v0ewaH1L1fA7NyzjNHwiMiXgiQc15FO96xI/DdnPPIOon2ppC/30Zn8AD3A48Dnkz7/7Hzy7J+0fH8qcALcs53d7TNBP61Y7pzXWnSGBxS91YAD9COH1w6xvxh2nGGvSLi9spt3wlsoP3Ok5+Utqd0zL8N+I+IOHgz2/CMLvWEwSF1KSLuzjm/h3ZsIQFX0vYYng08FngY+DhwXs75hIhYm3PeDdg7IpZvcsPttjfmnL8AnJVzPgrYA1gI3FoW+d/A4pzzG2m/7x3acZR7I2LlBL5MaVwOjksVIuL9wFuBdwBrab/74WO0Z0l9u/y8Gbgm53wP7ZlNz+hy8yfQHrb6FbCU9gyrkf2uAw6h/QKt1WWZs2nHVqSe8vs4JElV7HFIkqoYHJKkKgaHJKmKwSFJqmJwSJKqGBySpCoGhySpisEhSary/wFXUH5pOIO91AAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Gender',y='Purchase', data=awadh1)\n",
    "plt.title('Purchse by Gender')\n",
    "\n",
    "#Male=1\n",
    "#Female=0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 446,
   "id": "04d7da2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Purchase by Occupation')"
      ]
     },
     "execution_count": 446,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Occupation',y='Purchase', data=awadh1, hue='Gender')\n",
    "plt.title('Purchase by Occupation')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 447,
   "id": "dcaf5871",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Purchse by Product Category 1')"
      ]
     },
     "execution_count": 447,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Product_Category_1',y='Purchase', data=awadh1, hue='Gender')\n",
    "plt.title('Purchse by Product Category 1')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 452,
   "id": "19ee522e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Purchse by Product Category 2')"
      ]
     },
     "execution_count": 452,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Product_Category_2',y='Purchase', data=awadh1, hue='Gender')\n",
    "plt.title('Purchse by Product Category 2')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 449,
   "id": "fa8c6927",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Purchse by Product Category 3')"
      ]
     },
     "execution_count": 449,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Product_Category_3',y='Purchase', data=awadh1, hue='Gender')\n",
    "plt.title('Purchse by Product Category 3')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 453,
   "id": "5e79ebf2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Purchse by Purchse by Martial Status')"
      ]
     },
     "execution_count": 453,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.barplot(x='Marital_Status',y='Purchase', data=awadh1, hue='Gender')\n",
    "plt.title('Purchse by Purchse by Martial Status')\n",
    " #Married= 1\n",
    " #Single= 0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "639779fa",
   "metadata": {},
   "source": [
    "### Dropping Product_ID Column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 456,
   "id": "0742bfc1",
   "metadata": {},
   "outputs": [],
   "source": [
    "awadh1.drop('Product_ID', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 459,
   "id": "63ef3430",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Occupation</th>\n",
       "      <th>Stay_In_Current_City_Years</th>\n",
       "      <th>Marital_Status</th>\n",
       "      <th>Product_Category_1</th>\n",
       "      <th>Product_Category_2</th>\n",
       "      <th>Product_Category_3</th>\n",
       "      <th>Purchase</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>8370.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>15200.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1422.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>10</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>12</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>1057.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>16</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>8</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>7969.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>15227.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>19215.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>15854.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>15686.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>7871.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Gender  Age  Occupation  Stay_In_Current_City_Years  Marital_Status  \\\n",
       "0       0    1          10                           2               0   \n",
       "1       0    1          10                           2               0   \n",
       "2       0    1          10                           2               0   \n",
       "3       0    1          10                           2               0   \n",
       "4       1    7          16                           4               0   \n",
       "5       1    3          15                           3               0   \n",
       "6       1    5           7                           2               1   \n",
       "7       1    5           7                           2               1   \n",
       "8       1    5           7                           2               1   \n",
       "9       1    3          20                           1               1   \n",
       "\n",
       "   Product_Category_1  Product_Category_2  Product_Category_3  Purchase  B  C  \n",
       "0                   3                 8.0                16.0    8370.0  0  0  \n",
       "1                   1                 8.0                16.0   15200.0  0  0  \n",
       "2                  12                 8.0                16.0    1422.0  0  0  \n",
       "3                  12                 8.0                16.0    1057.0  0  0  \n",
       "4                   8                 8.0                16.0    7969.0  0  1  \n",
       "5                   1                 8.0                16.0   15227.0  0  0  \n",
       "6                   1                 8.0                16.0   19215.0  1  0  \n",
       "7                   1                 8.0                16.0   15854.0  1  0  \n",
       "8                   1                 8.0                16.0   15686.0  1  0  \n",
       "9                   8                 8.0                16.0    7871.0  0  0  "
      ]
     },
     "execution_count": 459,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "awadh1.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 460,
   "id": "5900a9e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dataset is ready for Training the Machine Learning Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4731b922",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
